-------------SERIALIZACION--------------

XML
 XmlSerializer serializer = new XmlSerializer(typeof(TipoObjeto));
 using(StreamWriter writer = new StreamWriter("archivo.xml"))
 {
     serializer.Serialize(writer, this);
 }

JSON

 string nombreFichero = "archivo.json";
 string jsonString = JsonSerializer.Serialize(ListaCreada);
 File.WriteAllText(nombreFichero, jsonString);

----------DESERIALIZAR------------------

XML
 public List<Cliente> DeserializarClientesXML()
 {
     XmlSerializer serializer = new XmlSerializer(typeof(TipoObjeto));
     using(StreamReader reader = new StreamReader("archivo.xml"))
     {
         Banco banco = (Banco)serializer.Deserialize(reader);
         return banco.ListaClientes;
     }
 }

JSON
 public List<Cliente> DeserializeAndGetClientesJson()
{
    using (StreamReader reader = new StreamReader("archivo.json"))
    {
        Banco banco = JsonSerializer.Deserialize<Banco>("archivo.json");
        return banco.ListaClientes;
    }
}

----------------------------FICHEROS----------------------------------------

internal class Ej5
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Nombre del archivo 1");
            string ruta1 = Path.Combine(Path.GetDirectoryName(Environment.CurrentDirectory), Console.ReadLine());
            Console.WriteLine("Nombre del archivo 2");
            string ruta2 = Path.Combine(Path.GetDirectoryName(Environment.CurrentDirectory), Console.ReadLine());
            string rutaDestino = Path.Combine(Path.GetDirectoryName(Environment.CurrentDirectory), @"union.txt");
            FileStream fileStream = File.Create(rutaDestino);
            StreamWriter streamW = new StreamWriter(fileStream);

            try
            {
                StreamReader streamR1 = new StreamReader(ruta1);
                StreamReader streamR2 = new StreamReader(ruta2);
                while (!streamR1.EndOfStream)
                {
                    streamW.WriteLine(streamR1.ReadLine());
                    if (!streamR2.EndOfStream) streamW.WriteLine(streamR2.ReadLine());
                }
                while (!streamR2.EndOfStream)
                {
                    streamW.WriteLine(streamR2.ReadLine());
                }
                streamR1.Close();
                streamR1.Dispose();
                streamR2.Close();
                streamR2.Dispose();
                streamW.Close();
                streamW.Dispose();
                fileStream.Close();
                fileStream.Dispose();
            }
            catch (Exception ex) { };
        }
    }

--------------------DIRECTORIOS----------------------------------------------

using System;
using System.IO;

Console.Write("Introduce el nombre del directorio: ");
string directorio = Console.ReadLine();


if (Directory.Exists(directorio))
{
    
    string[] ficheros = Directory.GetFiles(directorio);
    if (ficheros.Length == 0)
    {
        Console.WriteLine("El directorio no contiene ficheros.");
    }
    else
    {
        
        Console.Write("Introduce la extensi√≥n de fichero: ");
        string extension = Console.ReadLine();

        foreach (var item in ficheros)
        {
            if (Path.GetExtension(item) == $".{extension}")
            {
                Console.WriteLine(item);
            }
        }
    }
}
else
{
    Console.WriteLine("El directorio no existe.");
}

---------COMBOBOX BASE DATOS--------
private void EliminarGama_Load(object sender, EventArgs e)
{
    DataSet dataSet = conexion.EjecutarSentencia("select gama from gama_producto");
    DataTable datos = dataSet.Tables[0];
    foreach (DataRow item in datos.Rows)
    {
        comboBoxGama.Items.Add(item[0]);
    }
    dataGridView1.DataSource = datos;
}

------------COMANDOS SQL-----------------
INSERT INTO 'Nombre_Tabla'(columna1, columna2...) values (valorColumna1,valorColumna2...)
DELETE FROM 'Nombre_Tabla' WHERE condicion
UPDATE 'Nombre_Tabla' SET columna1 = valorNuevo

